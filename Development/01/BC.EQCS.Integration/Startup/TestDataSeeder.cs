using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.Linq;
using BC.EQCS.ActivityLog.Logger.AttributeTemplates;
using BC.EQCS.ActivityLog.Logger.PayloadModels;
using BC.EQCS.Entities;
using BC.EQCS.Entities.Models;
using BC.EQCS.Models.Enums;
using LoremNET;
using Newtonsoft.Json;

namespace BC.EQCS.Integration.Startup
{
    public static class TestDataSeeder
    {
        //Create incidents
        //Item definitions for incidents
        //Id                            // Autogenerated
        //FormalId                      // ?
        //Status                        // Can be pulled from the status DBset
        //CreateDate                    // Should make sure we have these based moving forward at least one for each day from 01/02/2015
        //RaisedDate                    // Just make sure this occurs after the CreateDate
        //IncidentDate                  // Make sure this occurs before the RaisedDate
        //Description                   // Randomly generate some lorem ipsum
        //ProductId                     // Select an even number of entries from each Product in the Product DbSet
        //RaisedBy                      // Need a user which is a test centre manager to assign this to
        //IncidentTypeId                // Randomly select an incident type from the Dbset of IncidentTypes - Consider generating an incident for each type
        //CategoryId                    // Randomly select a categoryId from the available Categories under the IncidentTypes available
        //SubCategoryId                 // Randomly select a subcategory from the available subcategories under the currentl Category
        //RiskRatingId                  // Randomly select from the riskrating DbSet
        //ResidualRiskRatingId          // ?
        //LoggedById                    // ? Select an appropriate user, need to know which user types can log <How is this diffeent to raised by?>
        //ReportUKVI                    // ?
        //TestCentreVenueId             // This must be one of the TestCentres under the User who raised the incident
        //TestCentreId                  // This must be one of the TestCentres under the User who raised the incident

        //Create incident actions
        //For a subset of the incidents we should create incident actions




        //Create Some geolocations
        //--Already in the database-ALL
        //--Already in the database-REGION
        //COUNTRY
        //TEST_CENTRE
        //TEST_LOCATION


        //Add two goelocations of type COUNTRY one for each of the two REGIONs {UK_IRELAND_AMERICAS, EUROPE} which has been created
        //Add two geolocations of the tupe TEST_CENTRE one for each COUNTRY which has been created
        //Add two geolocations of type TEST_LOCATION one for each TEST_CENTRE which has been created


        //First create some application users, we need at least one user of each application role {Global Operations Team, Regional Management Team, Verifications Team, Test Centre Staff, Country Compliance Team, Internal Auditor, External Auditor} , for each of the two regions (countries) we are interested in.
        //Item definitions for applicationusers
        //Id	
        //ObjectGUID	
        //DisplayName	
        //Department	
        //FirstName	
        //Surname	
        //Email	
        //Login	
        //JobTitle	
        //Telephone	
        //Country	
        //DefaultCountryId	
        //Enabled	
        //ApplicationCountryDepartmentId	
        //SelectedCountryId


        public static void PopulateData(EqcsEntities db)
        {
            //Make sure that these have been written to only run once against a database to avoid duplicate entries
            CreateUsersForAllRelevantGeoAreas(db);
            CreateIncidents(db);

        }

        private static void CreateUsersForAllRelevantGeoAreas(EqcsEntities db)
        {

            //Is bob already in the database
            var bobName = "GLOBAL_OPERATIONS_Bob";
            if (db.Users.Any(u => u.DisplayName.Equals(bobName))) 
                return;



            //We want a user for each possible fork in the geo tree
            //      ROOT   (GLOBAL_OPERATIONS_Bob)
            //       |
            //       | - UK_IRELAND_AMERICAS (RMT_UK_IRELAND_AMERICAS_Bob)
            //       |       |
            //       |       | - UK
            //       |              |
            //       |              | - London
            //       |              |       |
            //       |              |       | - LAMBETH_COMMUNITY_CENTRE (TCS_LAMBETH_COMMUNITY_CENTRE_Bob, TCS_LAMBETH_COMMUNITY_CENTRE_Tom)
            //       |              |       |                             
            //       |              |       | - CROYDON_COMMUNITY_CENTRE (TCS_CROYDON_COMMUNITY_CENTRE_Bob, TCS_CROYDON_COMMUNITY_CENTRE_Tom)
            //       |              |
            //       |              |
            //       |              | - Birmingham
            //       |                      |
            //       |                      | - MOSELEY_COMMUNITY_CENTRE (TCS_MOSELEY_COMMUNITY_CENTRE_Bob, TCS_MOSELEY_COMMUNITY_CENTRE_Tom)
            //       |                      |
            //       |                      | - BOURNVILLE_COMMUNITY_CENTRE (TCS_BOURNVILLE_COMMUNITY_CENTRE_Bob, TCS_BOURNVILLE_COMMUNITY_CENTRE_Tom)
            //       |
            //       |
            //       | - EUROPE (RMT_EUROPE_Bob)
            //       |      |
            //       |      | - France
            //       |              |
            //       |              | - Paris
            //                              | - LARIVEDROITE_COMMUNITY_CENTRE (TCS_LARIVEDROITE_COMMUNITY_CENTRE_Bob)

                
            //Get collections of geo areas which match each level
            var alls = db.AdminUnits.Where(g => g.Type.Code.Equals(Constants.AdminUnitTypes.Root)).ToList();
            var allRegions = db.AdminUnits.Where(g => g.Type.Code.Equals("IELTS_REGION"));
            var allTestLocations =
                db.AdminUnits.Where(g => g.Type.Code.Equals(Constants.AdminUnitTypes.TestLocation));


            //Get roles
            var gops = db.ApplicationRoles.FirstOrDefault(r => r.Code.Equals("GLOBAL_OPERATIONS"));
            var rmt = db.ApplicationRoles.FirstOrDefault(r => r.Code.Equals("RMT"));
            var tcs = db.ApplicationRoles.FirstOrDefault(r => r.Code.Equals("TCS"));


            var globalBob = new ApplicationUser
            {
                FirstName = bobName,
                Surname = bobName,
                DisplayName = bobName,
                Email = String.Format("{0}@{0}.{0}", bobName),
                Login = bobName,
                ObjectGUID = Guid.NewGuid(),
                UserToRoleToAdminUnits =
                    new List<UserToRoleToAdminUnit>
                    {
                        new UserToRoleToAdminUnit()
                        {
                            AdminUnit = alls.First(),
                            ApplicationRole = gops
                        }
                    }
            };

            db.Users.Add(globalBob);

            //Add users of the global level to all geo
            var usersToAdd = new List<ApplicationUser>();
            var usersPerGopsLevel = 2;
            foreach (var tempGeo in alls)
            {
                for (int i = 0; i < usersPerGopsLevel; i++)
                {
                    var name = gops.Code + "_" + "user" + "_" + i;
                    var newUser = new ApplicationUser
                    {
                        FirstName = name,
                        Surname = name,
                        DisplayName = name,
                        Email = String.Format("{0}@{0}.{0}", name),
                        Login = name,
                        ObjectGUID = Guid.NewGuid(),
                        UserToRoleToAdminUnits =
                            new List<UserToRoleToAdminUnit>
                            {
                                new UserToRoleToAdminUnit()
                                {
                                    AdminUnit = tempGeo,
                                    ApplicationRole = gops
                                }
                            }
                    };

                    usersToAdd.Add(newUser);
                }
            }


            //Add users of the regional level to all geo
            var usersPerRegionLevel = 3;
            foreach (var tempRegGeo in allRegions)
            {
                for (int i = 0; i < usersPerRegionLevel; i++)
                {
                    var name = rmt.Code + "_" + tempRegGeo.Code + "_" + "user" + "_" + i;
                    var newUser = new ApplicationUser
                    {
                        FirstName = name,
                        Surname = name,
                        DisplayName = name,
                        Email = String.Format("{0}@{0}.{0}", name),
                        ObjectGUID = Guid.NewGuid(),
                        Login = name,
                        UserToRoleToAdminUnits =
                            new List<UserToRoleToAdminUnit>
                            {
                                new UserToRoleToAdminUnit()
                                {
                                    AdminUnit = tempRegGeo,
                                    ApplicationRole = rmt
                                }
                            }
                    };

                    usersToAdd.Add(newUser);
                }


            }


            //Add users of the centre level to all geo
            var usersPerTestCentreVenue = 5;
            foreach (var tempRegGeo in allTestLocations)
            {
                for (int j = 0; j < usersPerTestCentreVenue; j++)
                {
                    var name = tcs.Code + "_" + tempRegGeo.Code + "_" + "user_" + j;
                    var newUser = new ApplicationUser
                    {
                        FirstName = name,
                        Surname = name,
                        DisplayName = name,
                        Email = String.Format("{0}@{0}.{0}", name),
                        ObjectGUID = Guid.NewGuid(),
                        Login = name,
                        UserToRoleToAdminUnits =
                            new List<UserToRoleToAdminUnit>
                            {
                                new UserToRoleToAdminUnit()
                                {
                                    AdminUnit = tempRegGeo,
                                    ApplicationRole = tcs
                                }
                            }
                    };

                    usersToAdd.Add(newUser);
                }
                  
            }
            var users = db.Users as DbSet<ApplicationUser>;
            users.AddRange(usersToAdd);

            db.SaveChanges();
        }


        private static void CreateIncidents(EqcsEntities db)
        {
            //If we have already inserted test data into the system, we don't want to do it again
            if (db.Incidents.Any(i => i.Description.Contains("Dummy")))
                return;

            //We want incdients for every :-
            // - Status
            // - Test centre
            // - User (either raised, or approved by etc... whatever is apropriate)
            // - With and without actions
            // - Actions which are open or closed
            // - Product
            // - Incident Type
            // - For each day over a pereiod of around a month
            // - A selection of categories
            // - For those categories which we use, a selection of appropriate subcategories
            // - Risk rating
            // - Some with some without residial risk ratings
            

            //Every user at a venue should raise a number of incidents, one incident for each user, for each status
            var roleCode = "TCS";

            //This gets us the user with their role, and area.
            var roleLocationAndUser =
                db.UserToRoleToAdminUnits.Where(
                    aaa => aaa.ApplicationRole.Code.Equals(roleCode))
                    .Include(r=>r.ApplicationRole)
                    .Include(r=>r.AdminUnit)
                    .Include(r=>r.ApplicationUser);

            //var tcs =
            //    db.ApplicationUsers.Where(
            //        u =>
            //            u.UserToRoleToAdminUnits.Any(
            //                aaa => aaa.ApplicationRole.Code.Equals(roleCode)));





            var incidents = new List<Entities.Models.Incident>();
            //For each of the test centre staff
            foreach (var rlu in roleLocationAndUser)
            {
                //Get the test centre for the current tcs user
                var user = rlu.ApplicationRole;
                var location = rlu.AdminUnit;
                var role = rlu.ApplicationRole;


                var rlu1 = rlu;

                var testLocation = db.TestLocations
                   .Include(tl => tl.AdminUnit)
                   .Include(tl => tl.AdminUnit.Parent)
                   .FirstOrDefault(tl => tl.AdminUnitId.Equals(rlu1.AdminUnitId));

                var testCentre = db.TestCentres.FirstOrDefault(tc => tc.AdminUnit.Code.Equals(testLocation.AdminUnit.Parent.Code));

                //For each of the possible Incident statuses
                foreach (var tempStatus in Enum.GetValues(typeof (IncidentStatus)))
                {
                    var status = (IncidentStatus) tempStatus;
                    //Create an incident
                    var incToAdd = new Entities.Models.Incident
                    {
                        IncidentClass = null,
                        CreateDate = DateTime.MinValue,
                        Description = "Dummy " + Lorem.Paragraph(15, 1),
                        IncidentDate = DateTime.MinValue,
                        Product = null,
                        RaisedDate = DateTime.MinValue,
                        ResidualRiskRating = null,
                        RiskRating = null,
                        RaisedBy = Lorem.Words(2, true, false),
                        LoggedBy = rlu.ApplicationUser,
                        Status = status,
                        TestCentre = testCentre,
                        TestLocation = testLocation,

                        IncidentActions = new List<Entities.Models.IncidentAction>(),
                        IncidentActivityLogs = new List<IncidentActivityLog>(),
                        TestDate = null
                        //ReportUKVI = String.Empty
                    };
                    
                    //Add it to the collection
                    incidents.Add(incToAdd);

                }
            }


            //// Now loop through the incidents adding in the additonal details
            //// Get all of the classes of type subcategory
            const string codeForSubategory = "SubCategory";
            //var incidentClasses = db.IncidentClasses.Where(ic => ic.Type.Code.Equals(codeForSubategory)).ToArray(); //Would have liked to have specified where IsActive here but it's not in the entity
            var incidentClasses = db.IncidentClasses.Where(ic => ic.Code.Equals("CANDID2")).ToArray();
            var counter = 0;
            var baseDateTime = new DateTime(2015, 03, 31, 9, 0, 0);
            var products = db.Products.Where(p => p.IsActive).ToArray();

            foreach (var inc in incidents)
            {
                //inc.IncidentClass = incidentClasses[counter];
                inc.IncidentClass = incidentClasses[0];

                inc.IncidentDate = baseDateTime;
                inc.TestDate = baseDateTime;
                inc.RaisedDate = baseDateTime.AddHours(3);
                inc.CreateDate = inc.RaisedDate.Value;


                ////TODO: This risk rating needs changing when we have risk rating in the new incidentclass model
                inc.RiskRatingId = 1;

                switch (counter % 3)
                {
                    case 0:
                        inc.ReportUkvi = null;
                        break;
                    case 1:
                        inc.ReportUkvi = false;
                        break;
                    case 2:
                        inc.ReportUkvi = true;
                        break;
                }


                //Increment the category selecting counter
                //If the category curser is passed the end of the subcategory index range, then reset to 0
                counter++;
                //if (counter >= incidentClasses.Count()) 
                    //counter = 0;

                //cycle through the products
                var productsIndex = counter % products.Count();
                inc.Product = products[productsIndex];

                //Every other set the testdate
                if(counter % 2 == 0)
                    inc.TestDate = baseDateTime.AddHours(-2);

                //Every five loops, move the base date back by one day
                if (counter % 5 == 0) baseDateTime = baseDateTime.AddDays(-1);

                //Give it some activity log entries
                AddIncidentActivityLogEntriesToIncident(inc);

            }


            //Incident actions
            //Get all incidents we have just created where the status is InProgress
            var inpIncs = incidents.Where(inc => inc.Status.Equals(IncidentStatus.InProgress)).ToArray();

            //Add an IncidentAction to 2 out of three Incidents which have Incident Status Active
            //Half of the IncidentActions should have an IncidentActionStatus of In progress
            //Half of the IncidentActions should have an IncidentActionStatus of Closed
            for (int i = 0; i < inpIncs.Length; i++)
            {
                var inc = inpIncs[i];


                //One in three times don't add an actions
                if (i % 3 == 0)
                    continue;


                var actionStatus = IncidentActionStatus.Closed;
                //One in three times raise an active actions
                if (i % 3 == 1)
                    actionStatus = IncidentActionStatus.InProgress;

                //Get roles
                var gops = db.ApplicationRoles.FirstOrDefault(r => r.Code.Equals("GLOBAL_OPERATIONS"));
                var gopsUser = gops.UserToRoleToAdminUnits.FirstOrDefault().ApplicationUser;

                var incAct = new Entities.Models.IncidentAction
                {
                    ActionDescription = Lorem.Paragraph(15, 1),
                    AssignedOn = inc.RaisedDate.Value.AddHours(2),
                    //Comments = String.Empty,//Lorem.Paragraph(15, 1),
                    Status = actionStatus,
                    AssignedBy = gopsUser,
                    //AssignedTo = null,
                    //AssignedOn = inc.RaisedDate.Value.AddHours(3),
                    //Attachments = String.Empty,
                    AssignedById = gopsUser.Id,
                    AssignedToTestCentre = true
                };
             
   
                inc.IncidentActions.Add(incAct);
            }
            


            try
            {
                db.Incidents.AddRange(incidents);
                db.SaveChanges();
            }
            catch (Exception e)
            {
                throw;
            }
        }


        private static void AddIncidentActivityLogEntriesToIncident(Entities.Models.Incident incident)
        {
            var numActivityEntries = 3;

            var activities = new List<IncidentActivityLog>();


            for (var i = 0; i < numActivityEntries; i++)
            {
                activities.Add(new IncidentActivityLog
                {
                    DateTimeOfActivity = incident.CreateDate.AddDays(i),
                    Incident = incident,
                    ApplicationUser = incident.LoggedBy,
                    LogType = IncidentActivityLogType.Change,
                    Payload = GeneratePayLoad(i)
                });
            }

            incident.IncidentActivityLogs = activities;
        }


        private static string GeneratePayLoad(int iter)
        {
            var payloads = new List<ChangedPropertyValuesPayload>();

            //Reflect over the IncidentComparisonTemplate creating a log entry for each class

            var properties = typeof(IncidentAttributeTemplate).GetProperties();

            //For each property see if the values are the same
            foreach (var propertyInfo in properties)
            {
                var propertyName = propertyInfo.Name;
                var labelName = propertyInfo.Name;
               
                //Get either the display name or if none provided use the property name with added spaces
                var displayNameAtt = propertyInfo.GetCustomAttributes(typeof(DisplayNameAttribute), true).SingleOrDefault();

                //If the display name has been set, overite the propetyname as the log entry
                if (displayNameAtt != null)
                    labelName = ((DisplayNameAttribute)displayNameAtt).DisplayName;

                //If they are not then create a new log entry
                var payload = new ChangedPropertyValuesPayload
                {
                    FieldChanged = propertyName,
                    Label = labelName,
                    OriginalValue = propertyName + iter,
                    NewValue = propertyName + (iter + 1)
                };
                
                payloads.Add(payload);
               
            }


            return JsonConvert.SerializeObject(payloads);

        }
    }
}
