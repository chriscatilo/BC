// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BC.EQCS.Integration.Incident
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Close Incident")]
    public partial class CloseIncidentFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CloseIncident.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Close Incident", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Test Label",
                        "TestCentre",
                        "TestLocation",
                        "Category",
                        "SubCategory",
                        "IncidentDate",
                        "IncidentTime",
                        "Description",
                        "ImmediateActionTaken",
                        "RiskRating",
                        "Product",
                        "RaisedBy",
                        "TestDate",
                        "ReportUkvi",
                        "ReferringOrgSurname",
                        "ReferringOrgFirstnames",
                        "ReferringOrgJobTitle",
                        "ReferringOrgEmail",
                        "ReferringOrgType",
                        "ReferringOrgCountry",
                        "ReferringOrganisation",
                        "ReferringOrgExists",
                        "NoOfCandidates"});
            table1.AddRow(new string[] {
                        "Typical",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "VERIFI1",
                        "AGEDTR",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph(5,10,5,10;Typical)",
                        "gen.paragraph(5,10,5,10;TypicalImmedAction)",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "False",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "UpdateClose",
                        "GBS03",
                        "UKVI-GBS03-84",
                        "VERIFI1",
                        "VERIFI2",
                        "2015-02-28",
                        "11:00",
                        "gen.paragraph(5,10,5,10;Update)",
                        "gen.paragraph(5,10,5,10;UpdateImmedAction)",
                        "MED",
                        "IELTSLSA1",
                        "Someone Else",
                        "2015-03-02",
                        "False",
                        "Whitford",
                        "Karen",
                        "CEO",
                        "karen@another.org",
                        "EDU",
                        "US",
                        "BC",
                        "True",
                        "2"});
            table1.AddRow(new string[] {
                        "CloseReopen",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "VERIFI1",
                        "AGEDTR",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph(5,10,5,10;CloseReopen)",
                        "gen.paragraph(5,10,5,10;CloseReopenImmedAction)",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "False",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
#line 4
 testRunner.Given("table of incidents to persist", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Test Label",
                        "IELTSRegion",
                        "TestCentre",
                        "TestLocation",
                        "Category",
                        "SubCategory",
                        "IncidentDate",
                        "IncidentTime",
                        "Description",
                        "ImmediateActionTaken",
                        "RiskRating",
                        "RaisedDate",
                        "Product",
                        "RaisedBy",
                        "TestDate",
                        "ReportUkvi",
                        "ReferringOrgSurname",
                        "ReferringOrgFirstnames",
                        "ReferringOrgJobTitle",
                        "ReferringOrgEmail",
                        "ReferringOrgType",
                        "ReferringOrgCountry",
                        "ReferringOrgName",
                        "ResidualRiskRating",
                        "TestCentreName",
                        "TestCentreNumber",
                        "IsUkvi",
                        "NoOfCandidates",
                        "IncidentClassCode"});
            table2.AddRow(new string[] {
                        "Typical",
                        "UKIA",
                        "GBS02 Ealing, Hammersmith And West L",
                        "London West",
                        "Verifications",
                        "Aged TRF",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph(;Typical)",
                        "gen.paragraph(;TypicalImmedAction)",
                        "Low",
                        "2015-03-02",
                        "IELTS UKVI",
                        "Someone",
                        "2015-03-01",
                        "False",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "Education",
                        "United Kingdom",
                        "British Council",
                        "Low",
                        "Ealing, Hammersmith And West L",
                        "GBS02",
                        "True",
                        "1",
                        "AGEDTR"});
            table2.AddRow(new string[] {
                        "UpdateClose",
                        "UKIA",
                        "GBS03 Anglia Ruskin University",
                        "Chelmsford",
                        "Verifications",
                        "Verification Enquiry only",
                        "2015-02-28",
                        "11:00",
                        "gen.paragraph(;Update)",
                        "gen.paragraph(;UpdateImmedAction)",
                        "Medium",
                        "2015-03-01",
                        "LS A1",
                        "Someone Else",
                        "2015-03-02",
                        "False",
                        "Whitford",
                        "Karen",
                        "CEO",
                        "karen@another.org",
                        "Education",
                        "United States of America",
                        "British Council",
                        "Low",
                        "Anglia Ruskin University",
                        "GBS03",
                        "True",
                        "2",
                        "VERIFI2"});
            table2.AddRow(new string[] {
                        "CloseReopen",
                        "UKIA",
                        "GBS02 Ealing, Hammersmith And West L",
                        "London West",
                        "Verifications",
                        "Aged TRF",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph(;CloseReopen)",
                        "gen.paragraph(;CloseReopenImmedAction)",
                        "Low",
                        "2015-03-02",
                        "IELTS UKVI",
                        "Someone",
                        "2015-03-01",
                        "False",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "Education",
                        "United Kingdom",
                        "British Council",
                        "High",
                        "Ealing, Hammersmith And West L",
                        "GBS02",
                        "True",
                        "1",
                        "AGEDTR"});
#line 10
 testRunner.Given("table of incidents to view", ((string)(null)), table2, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Close Incident Successfully")]
        public virtual void CloseIncidentSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Close Incident Successfully", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 18
 testRunner.Given("incident labeled Typical", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
  testRunner.And("new incident is raised and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
  testRunner.And("incident is accepted and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Comments",
                        "ResidualRiskRating"});
            table3.AddRow(new string[] {
                        "gen.paragraph()",
                        "LOW"});
#line 21
 testRunner.When("incident is closed and response is Ok", ((string)(null)), table3, "When ");
#line 24
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.Then("incident status is Closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
  testRunner.And("incident details are correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And("available commands for incident are reopen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update while Closing Incident Successfully")]
        public virtual void UpdateWhileClosingIncidentSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update while Closing Incident Successfully", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 31
 testRunner.Given("incident labeled Typical", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
  testRunner.And("new incident is raised and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
  testRunner.And("incident is accepted and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Comments",
                        "ResidualRiskRating"});
            table4.AddRow(new string[] {
                        "gen.paragraph()",
                        "LOW"});
#line 34
 testRunner.When("incident is updated with row UpdateClose while closing and response is Ok", ((string)(null)), table4, "When ");
#line 37
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("incident status is Closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
  testRunner.And("incident details are correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
  testRunner.And("available commands for incident are reopen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Close Reopened Incident Successfully")]
        public virtual void CloseReopenedIncidentSuccessfully()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Close Reopened Incident Successfully", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 44
 testRunner.Given("incident labeled CloseReopen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
  testRunner.And("new incident is raised and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
  testRunner.And("incident is accepted and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Comments",
                        "ResidualRiskRating"});
            table5.AddRow(new string[] {
                        "gen.paragraph()",
                        "LOW"});
#line 47
  testRunner.And("incident is closed and response is Ok", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Reason"});
            table6.AddRow(new string[] {
                        "gen.paragraph()"});
#line 50
  testRunner.And("incident is reopened and response is Ok", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Comments",
                        "ResidualRiskRating"});
            table7.AddRow(new string[] {
                        "gen.paragraph()",
                        "HIGH"});
#line 53
 testRunner.When("incident is closed and response is Ok", ((string)(null)), table7, "When ");
#line 56
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.Then("incident status is Closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
  testRunner.And("incident details are correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
  testRunner.And("available commands for incident are reopen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
