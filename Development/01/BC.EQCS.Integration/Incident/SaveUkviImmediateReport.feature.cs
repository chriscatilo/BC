// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BC.EQCS.Integration.Incident
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Save Incident\'s UKVI Immediate Report")]
    public partial class SaveIncidentSUKVIImmediateReportFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SaveUkviImmediateReport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Save Incident\'s UKVI Immediate Report", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Test Label",
                        "ReportUkvi",
                        "Category",
                        "SubCategory",
                        "UkviImmediateReportType",
                        "TestCentre",
                        "TestLocation",
                        "IncidentDate",
                        "IncidentTime",
                        "Description",
                        "ImmediateActionTaken",
                        "RiskRating",
                        "Product",
                        "RaisedBy",
                        "TestDate",
                        "ReferringOrgSurname",
                        "ReferringOrgFirstnames",
                        "ReferringOrgJobTitle",
                        "ReferringOrgEmail",
                        "ReferringOrgType",
                        "ReferringOrgCountry",
                        "ReferringOrganisation",
                        "ReferringOrgExists",
                        "NoOfCandidates"});
            table1.AddRow(new string[] {
                        "VENUE1 Incident",
                        "True",
                        "VENUE1",
                        "NULL",
                        "Rubbish",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "CLERIC2 Incident",
                        "True",
                        "CLERIC2",
                        "NULL",
                        "Rubbish",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "VIDEO1 Incident",
                        "True",
                        "VIDEO1",
                        "NULL",
                        "Rubbish",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "COUNTE Incident",
                        "True",
                        "VERIFI1",
                        "COUNTE",
                        "Rubbish",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "No Report Incident",
                        "False",
                        "VERIFI1",
                        "COUNTE",
                        "Rubbish",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "OTHER SLF Incident",
                        "True",
                        "OTHER",
                        "NULL",
                        "SLF",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "OTHER NCT Incident",
                        "True",
                        "OTHER",
                        "NULL",
                        "NCT",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
            table1.AddRow(new string[] {
                        "OTHER No Report Incident",
                        "False",
                        "OTHER",
                        "NULL",
                        "NULL",
                        "GBS02",
                        "UKVI-GBS02-87",
                        "2015-03-01",
                        "10:00",
                        "gen.paragraph()",
                        "gen.paragraph()",
                        "LOW",
                        "UKVI",
                        "Someone",
                        "2015-03-01",
                        "Bradshaw",
                        "Benjamin",
                        "Director",
                        "ben@some.org",
                        "EDU",
                        "GB",
                        "BC",
                        "True",
                        "1"});
#line 4
 testRunner.Given("table of incidents to persist", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully save UkviImmediateReportType while updating incident during workflow" +
            "")]
        public virtual void SuccessfullySaveUkviImmediateReportTypeWhileUpdatingIncidentDuringWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully save UkviImmediateReportType while updating incident during workflow" +
                    "", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 18
 testRunner.Given("incident labeled VENUE1 Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.When("new incident is saved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
  testRunner.And("incident attribute UkviImmediateReportType is Service Level Failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
  testRunner.And("incident is modified with No Report Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
  testRunner.And("incident is saved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And("incident attribute UkviImmediateReportType is NULL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
  testRunner.And("incident is modified with CLERIC2 Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
  testRunner.And("incident is raised and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
  testRunner.And("incident attribute UkviImmediateReportType is Notification of Compromised Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
  testRunner.And("incident is modified with No Report Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
  testRunner.And("incident is saved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
  testRunner.And("incident attribute UkviImmediateReportType is NULL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
  testRunner.And("incident is updated with row VIDEO1 Incident while accepting and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
  testRunner.And("incident attribute UkviImmediateReportType is Service Level Failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
  testRunner.And("incident is modified with No Report Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
  testRunner.And("incident is saved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
  testRunner.And("incident attribute UkviImmediateReportType is NULL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Comments",
                        "ResidualRiskRating"});
            table2.AddRow(new string[] {
                        "gen.paragraph()",
                        "LOW"});
#line 53
  testRunner.And("incident is updated with row COUNTE Incident while closing and response is Ok", ((string)(null)), table2, "And ");
#line 56
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.Then("incident attribute UkviImmediateReportType is Notification of Compromised Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successfully save UkviImmediateReportType while updating OTHER-class incident dur" +
            "ing workflow")]
        public virtual void SuccessfullySaveUkviImmediateReportTypeWhileUpdatingOTHER_ClassIncidentDuringWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully save UkviImmediateReportType while updating OTHER-class incident dur" +
                    "ing workflow", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 62
 testRunner.Given("incident labeled OTHER SLF Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.When("new incident is saved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
  testRunner.And("incident attribute UkviImmediateReportType is Service Level Failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("incident is modified with OTHER NCT Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.And("incident is saved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
  testRunner.And("incident attribute UkviImmediateReportType is Notification of Compromised Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
  testRunner.And("incident is modified with OTHER SLF Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
  testRunner.And("incident is raised and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And("incident attribute UkviImmediateReportType is Service Level Failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
  testRunner.And("incident is modified with OTHER No Report Incident", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And("incident is saved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
  testRunner.And("incident attribute UkviImmediateReportType is NULL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
  testRunner.And("incident is updated with row OTHER NCT Incident while accepting and response is O" +
                    "k", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("incident attribute UkviImmediateReportType is Notification of Compromised Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Comments",
                        "ResidualRiskRating"});
            table3.AddRow(new string[] {
                        "gen.paragraph()",
                        "LOW"});
#line 91
  testRunner.And("incident is updated with row OTHER SLF Incident while closing and response is Ok", ((string)(null)), table3, "And ");
#line 94
  testRunner.And("incident is retrieved and response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.Then("incident attribute UkviImmediateReportType is Service Level Failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
